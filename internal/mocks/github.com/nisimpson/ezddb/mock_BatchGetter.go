// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"

	mock "github.com/stretchr/testify/mock"
)

// MockBatchGetter is an autogenerated mock type for the BatchGetter type
type MockBatchGetter struct {
	mock.Mock
}

type MockBatchGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBatchGetter) EXPECT() *MockBatchGetter_Expecter {
	return &MockBatchGetter_Expecter{mock: &_m.Mock}
}

// BatchGetItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockBatchGetter) BatchGetItem(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) *dynamodb.BatchGetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBatchGetter_BatchGetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItem'
type MockBatchGetter_BatchGetItem_Call struct {
	*mock.Call
}

// BatchGetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchGetItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *MockBatchGetter_Expecter) BatchGetItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockBatchGetter_BatchGetItem_Call {
	return &MockBatchGetter_BatchGetItem_Call{Call: _e.mock.On("BatchGetItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockBatchGetter_BatchGetItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...func(*dynamodb.Options))) *MockBatchGetter_BatchGetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchGetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockBatchGetter_BatchGetItem_Call) Return(_a0 *dynamodb.BatchGetItemOutput, _a1 error) *MockBatchGetter_BatchGetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBatchGetter_BatchGetItem_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error)) *MockBatchGetter_BatchGetItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBatchGetter creates a new instance of MockBatchGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBatchGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBatchGetter {
	mock := &MockBatchGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
